// 한 학급에서 반장 선거를 하는데 3 명의 후보자를 두고 10 명의 학생이 투표 를 하였다
// 1~3번 까지의 후보자들중에서 과반수 이상 득표를 하면 당선 이 된다
// 투표 박스는 배열의 리스트로 제공 되며 여기에는 1~3 번 각 후보자의 번호가 기표 되어 있다 .
// 아래와 같이 동작하도록 투표 솔루션 시스템을 자바 코드로 구현하시오
// (1) 각 후보자가 득표한 득표 수를 출력 하시오
// (2) 가장 많은 득표 수와 그때의 후보자 번호를 출력 하시오 .
// (3) 가장 많이 득표한 후보자의 득표 수가 과반수 이상을 확보하였는지 체크 하여 당선 또는 미당선을 출력 하시오
/*[결과 출력]
-----------------------------------------------------------------------------------------------------------------------------
1번 후보 ----> 2 표
2번 후보 ----> 2 표
3번 후보 ----> 3 표
가장 많은 득표 수 ----> 3 표 이고 , 후보자는 3 번 후보자 입니다
과반수 이상 실패했습니다 . ----> 미당선
-------------------------------------------------------------------------------------------------------------------------------*/
import java.util.Arrays;

public class License_CosPattern5{
	public static void main(String[] args){
		int[] voteBox = {1, 3, 1, 3, 3, 2, 2};
		int[] count = new int[3];   // 후보 3명
		
		for(int i=0; i<voteBox.length; i++)
			count[voteBox[i]-1]++;   // 후보가 1번부터니까 득표수는 -1하여 0번째부터 저장
		
		// 가장 많은 득표 수와 후보자 가정
		int max = count[0], candidate = 0;
		for(int i=0; i<count.length; i++){
			System.out.println((i+1) + "번 후보 --> " + count[i] + " 표");
			if(max < count[i]){
				max = count[i];   // 더 큰 득표수가 있으면 가장 많은 득표수
				candidate = i;   // 가장 많은 득표수를 받은 후보 저장
			}
		}
		System.out.printf("가장 많은 득표 수 --> %d표 이고, 후보자는 %d번 후보자 입니다.%n", max, candidate);
		
		if(max >= (voteBox.length / 2))
			System.out.println("과반수 이상 성공했습니다 . ----> 당선");
		else
			System.out.println("과반수 이상 실패했습니다 . ----> 미당선");
		
		// 배열에서 가장 큰 값인 최댓값을 반복문 사용없이 찾아보시오
		// 이때는 정렬 ( 함수를 이용하면 된다
		// 이 문제는 배열의 최댓값을 묻는 문제에서 반복문의 사용없이 함수를 이용 하여 최댓값을 구하는 문제이다
		/*[결과 출력]
		-----------------------------------------------------------------------------------------------------------------------------
		가장 적은 득표 수 최솟값은 = 2
		가장 많은 득표 수 최댓값은 = 3
		-------------------------------------------------------------------------------------------------------------------------------*/
		Arrays.sort(count);
		
		System.out.println("-----------------------------------------");
		System.out.println("가장 적은 득표 수 최솟값은 = " + count[0]);   // 오름차순 정렬. 0번째가 가장 적은 수.
		System.out.println("가장 적은 득표 수 최댓값은 = " + count[count.length-1]);   // 0번째가 있으니 배열의 길이에 -1
	}
}